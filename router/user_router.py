import asyncio
from collections import defaultdict
import os
import re
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.types import ReplyKeyboardRemove
from aiogram import F, Bot, Router
from aiogram import types
from aiogram.filters import Command



from keyboard.user_keyboard import beru_kb, confilm_reject_kb,get_card_keyboard,get_start_keyboard
from text.text_messages import TextMessage

from aiogram.fsm.context import FSMContext
from router.state_classes import CreateCardState

from aiogram.types import LabeledPrice
from dotenv import load_dotenv

load_dotenv()


user_router = Router()
media_group_buffer = defaultdict(list)
media_group_locks = {}
photo_group = {}
photo_id = {}
ADMIN_ID = os.getenv('ADMIN_ID')
GROUP_ID = os.getenv('GROUP_ID')
    


@user_router.message(Command('start'))
async def send_welcome(message: types.Message):

    """
    This handler will be called when user sends `/start` command
    """
    
    await message.answer(text=TextMessage.START_MESSAGE, reply_markup=await get_start_keyboard())
    
@user_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def send_help(message: types.Message):
    await message.answer(text=TextMessage.HELP_MESSAGE, parse_mode='HTML')




@user_router.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã")
async def send_tarif(message: types.Message):
    await message.answer(text=TextMessage.TARIF_MESSAGE_ONE, parse_mode='HTML')
    

"""–°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò"""
@user_router.message(F.text == "‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def create_card(message: types.Message, state: FSMContext):
           
    await message.answer(text=" ‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.")
    await message.answer(text="üß© –í—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:\n(üñºÔ∏è 1 –∫–∞—Ä—Ç–æ—á–∫–∞ = 3‚Äì5 —Å–ª–∞–π–¥–æ–≤)", reply_markup=await get_card_keyboard(TextMessage.CARD_KEYBOARD, buttons=1))
    await state.set_state(CreateCardState.cards)
        
    

    
 
   


@user_router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await message.answer(text=TextMessage.START_MESSAGE, reply_markup=await get_start_keyboard())
    await state.clear()



@user_router.message(CreateCardState.cards)
async def set_term(message: types.Message, state: FSMContext):
    if message.text not in ['üí≥ 1 –∫–∞—Ä—Ç–æ—á–∫–∞ ‚Äî 8 000‚Ç∏','üí≥ 3 –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî 24 000‚Ç∏','üí≥ 5 –∫–∞—Ä—Ç–æ—á–µ–∫ ‚Äî 35 000‚Ç∏','üí≥ 10 –∫–∞—Ä—Ç–æ—á–µ–∫ ‚Äî 45 000‚Ç∏']:
        await message.answer(text="üß© –í—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:\n(üñºÔ∏è 1 –∫–∞—Ä—Ç–æ—á–∫–∞ = 3‚Äì5 —Å–ª–∞–π–¥–æ–≤)", reply_markup=await get_card_keyboard(TextMessage.CARD_KEYBOARD, buttons=1))
        return
        
   

    if message.text == 'üí≥ 1 –∫–∞—Ä—Ç–æ—á–∫–∞ ‚Äî 8 000‚Ç∏':
        price = 8000
        cards = "1"
        fast = False
        text = '–ù–µ —Å—Ä–æ—á–Ω–æ'
        await state.update_data(cards = cards, price = price, srok = fast, term = text)
        await message.answer(text="üìö –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ = 3‚Äì5 —Å–ª–∞–π–¥–æ–≤\n–°–∫–æ–ª—å–∫–æ —Å–ª–∞–π–¥–æ–≤ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ?\nüìù –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ",
                              reply_markup= await get_card_keyboard(TextMessage.SLAID_KEYBOARD, buttons=1))
        await state.set_state(CreateCardState.slaid)
        return
    elif message.text == 'üí≥ 3 –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî 24 000‚Ç∏':
        price = 24000
        text = "3"
    elif message.text == 'üí≥ 5 –∫–∞—Ä—Ç–æ—á–µ–∫ ‚Äî 35 000‚Ç∏':
        price = 35000
        text = "5"
    elif message.text == 'üí≥ 10 –∫–∞—Ä—Ç–æ—á–µ–∫ ‚Äî 45 000‚Ç∏':
        price = 45000
        text = "10"
    

    await state.update_data(cards = text, price = price)
    await message.answer(text="‚è± –ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ?\n–ï—Å–ª–∏ –≤–∞–∂–µ–Ω —Å—Ä–æ–∫ ‚Äî ‚ö°Ô∏è –≤–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –¥–µ–ª–∞–µ–º –∑–∞ 2 —á–∞—Å–∞!", reply_markup=await get_card_keyboard(TextMessage.TERM_KEYBOARD))
    await state.set_state(CreateCardState.term)






"""–í–í–û–î –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö"""

@user_router.message(CreateCardState.term)
async def create_charcter(message: types.Message, state: FSMContext):
    if message.text == '‚ö°Ô∏è –î–∞, —Å—Ä–æ—á–Ω–æ (+10 000‚Ç∏)':
        text = '–°–†–û–ß–ù–û!'
        fast = True
    elif message.text == '‚è≥ –ù–µ—Ç, –º–æ–∂–Ω–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ':
        text = '–ù–µ —Å—Ä–æ—á–Ω–æ'
        fast = False


    await state.update_data(term=text, srok=fast)
    
    
    await message.answer(text="üìö –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ = 3‚Äì5 —Å–ª–∞–π–¥–æ–≤\n–°–∫–æ–ª—å–∫–æ —Å–ª–∞–π–¥–æ–≤ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ?\nüìù –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ", reply_markup= await get_card_keyboard(TextMessage.SLAID_KEYBOARD, buttons=1))
    await state.set_state(CreateCardState.slaid)




"""–í–í–û–î –û–°–û–ë–ï–ù–ù–û–°–¢–ï–ô"""
@user_router.message(CreateCardState.slaid)
async def create_discription(message: types.Message, state: FSMContext):
    if message.text == '‚ûñ 3Ô∏è‚É£':
        text = "3"
    elif message.text == '‚ûñ 4Ô∏è‚É£':
        text = "4"
    elif message.text == '‚ûñ 5Ô∏è‚É£':
        text = "5"
    else:
        text = message.text

    await state.update_data(slaid=text)
    
    await message.answer(text=TextMessage.NAME_TEXT, reply_markup=ReplyKeyboardRemove())

    await state.set_state(CreateCardState.name)



@user_router.message(CreateCardState.name)
async def create_name(message: types.Message, state: FSMContext):
    
    await state.update_data(name=message.text)
    
    
    await message.answer(text=TextMessage.DISCRIPTION_TEXT,reply_markup=ReplyKeyboardRemove())
    await state.set_state(CreateCardState.discription)


@user_router.message(CreateCardState.discription)
async def create_discription(message: types.Message, state: FSMContext):
    await state.update_data(discription=message.text)


    await message.answer(text=TextMessage.PHOTO_TEXT)
    await state.set_state(CreateCardState.photo)





@user_router.message(CreateCardState.photo)
async def get_photo(message: types.Message, state: FSMContext, bot : Bot):
    if not message.photo:
        await message.answer(text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        return

    if not message.media_group_id:
        await message.answer(text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É)")
        return

    mg_id = message.media_group_id
    file_id = message.photo[-1].file_id
    media_group_buffer[mg_id].append(file_id)

    # –ï—Å–ª–∏ —ç—Ç–æ—Ç media_group —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    if mg_id in media_group_locks:
        return

    # –°—Ç–∞–≤–∏–º "–∑–∞–º–æ–∫", —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    media_group_locks[mg_id] = True

    # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É, –ø–æ–∫–∞ Telegram –¥–æ—Å—ã–ª–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã
    await asyncio.sleep(1)

    all_photos = media_group_buffer.pop(mg_id, [])
    media_group_locks.pop(mg_id, None)

    if len(all_photos) < 2:
        await message.answer("‚ö†Ô∏è –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ñ–æ—Ç–æ.")
        return


    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(photo=all_photos, media_group_id = mg_id)
    await state.set_state(CreateCardState.style)

    await message.answer(
        text="üñº –°—Ç–∏–ª—å\n–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–µ–±–µ –±–ª–∏–∂–µ?\n‚úçÔ∏è –ò–ª–∏ –Ω–∞–ø–∏—à–∏ –°–≤–æ–π —Å—Ç–∏–ª—å ",
        reply_markup=await get_card_keyboard(TextMessage.STYLE_KEYBOARD, 1)
        
    )
   

@user_router.message(CreateCardState.style)
async def select_style(message: types.Message, state: FSMContext):
    if message.text == "1Ô∏è‚É£ –Ø—Ä–∫–∏–π –∏ —Ü–µ–ø–ª—è—é—â–∏–π"or message.text == "2Ô∏è‚É£ –°—Ç—Ä–æ–≥–∏–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π" or message.text == "3Ô∏è‚É£ –ú—è–≥–∫–∏–π –∏ –Ω–µ–∂–Ω—ã–π":
        text = message.text
        text = re.sub(r"\dÔ∏è‚É£ ?", "", text)
    else:
        text = message.text


   
    await state.update_data(style=text)
   
    
    
    await message.answer(text=TextMessage.CONTACT_TEXT, reply_markup=ReplyKeyboardRemove())
    await state.set_state(CreateCardState.contact)
   

@user_router.message(CreateCardState.contact)
async def create_contact(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(contact=message.text)
    await message.answer(text='üí≥ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤—Å—ë –≤ —Ä–∞–±–æ—Ç—É!')
    data = await state.get_data()
    
    fast = data.get('srok')
    price_tng = data.get('price')
    print(fast)
    if fast == True:
        price = (price_tng+10000)
    if fast == False:
        price = price_tng
    await message.answer(text = TextMessage.INVOICE_TEXT.format(price=price), parse_mode='HTML')
    await state.update_data(user_id = message.from_user.id)
    await state.set_state(CreateCardState.invoice)

@user_router.message(CreateCardState.invoice)
async def create_invoice(message: types.Message, state: FSMContext, bot: Bot):
    if not message.photo:
        await message.answer(text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        return
    data = await state.get_data()
    print(data)
    cards = data.get('cards')
    fast = data.get('srok')
    price_tng = data.get('price')
    
    
    
    if fast == True:
        price = (price_tng+10000)
        text = '–°–†–û–ß–ù–û!'
    if fast == False:
        price = price_tng
        text = '–ù–µ —Å—Ä–æ—á–Ω–æ'
    await bot.send_photo(chat_id=ADMIN_ID, photo=message.photo[-1].file_id, caption=f"üí≥ –û–ø–ª–∞—Ç–∞ {cards} –∫–∞—Ä—Ç–æ—á–µ–∫ ‚Äî {price}‚Ç∏, {text}",reply_markup=await confilm_reject_kb())
    await message.answer(text = '–í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    

@user_router.callback_query(F.data == 'confirm')
async def confirm(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    await callback.answer('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
    ids_photo = []
    try:
        data = await state.get_data()
        print(data)
    except:
        return
    cards = data.get('cards')
    fast = data.get('srok')
    await state.clear()
    user_id = data.get('user_id')
    photos = data.get('photo')
    media_group_id = data.get('media_group_id')
    photo_group.setdefault(media_group_id, []).extend(photos)
    media = [types.InputMediaPhoto(media=msg) for msg in photos]
    
    if fast == True:
        await bot.send_media_group(chat_id=GROUP_ID, media=media)
        await bot.send_message(chat_id=GROUP_ID,text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ {cards}\n"
                                                                          
                                                                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {data.get('slaid')}\n"
                                                                          f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}\n"
                                                                          f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('discription')}\n"
                                                                          f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data.get('contact')}\n"
                                                                          f"–°—Ç–∏–ª—å: {data.get('style')}\n"
                                                                          f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_id}</code>\n"
                                                                          f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /mail",
                                                                          parse_mode='HTML'
                                                                          )
        
    if fast == False:
        
        ids = await bot.send_media_group(chat_id=GROUP_ID, media=media)
        for id in ids:
                ids_photo.append(id.message_id)
        photo_id.setdefault(media_group_id, []).extend(ids_photo)
        await bot.send_message(chat_id=GROUP_ID,text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ {cards}\n"
                                                                          
                                                                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {data.get('slaid')}\n"
                                                                          f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}\n"
                                                                          f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('discription')}\n"
                                                                          f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data.get('contact')}\n"
                                                                          f"–°—Ç–∏–ª—å: {data.get('style')}\n"
                                                                          f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_id}</code>\n"
                                                                          f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /mail",
                                                                          parse_mode='HTML',
                                                                          reply_markup=await beru_kb(media_group_id=media_group_id)

                                                                          )
    await callback.message.delete()   
@user_router.callback_query(F.data == 'reject')
async def reject(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    user_id = data.get('user_id')
    await bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à —á–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await callback.answer(text="‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await asyncio.sleep(2)
    await callback.message.delete()
    
    

    
    # await message.answer(text="‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞—é –ø–ª–∞—Ç—ë–∂...\n–°–µ–∫—É–Ω–¥–∞ ‚Äî –∏ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ üí≥")
    # await bot.send_invoice(
    #         chat_id=message.from_user.id,
    #         title="–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫",
    #         description=f"–û–ø–ª–∞—Ç–∞ {cards} –∫–∞—Ä—Ç–æ—á–µ–∫",
    #         payload=f"{cards}cards",
    #         provider_token="2051251535:TEST:OTk5MDA4ODgxLTAwNQ",
    #         currency="kzt",
    #         prices=[LabeledPrice(label="–ö–∞—Ä—Ç–æ—á–∫–∏", amount=price)]
    #     )
 

   

# @user_router.pre_checkout_query()
# async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery, bot : Bot, state : FSMContext):
    
#     ids_photo = []
#     data = await state.get_data()
#     cards = data.get('cards')
#     await state.clear()
#     photos = data.get('photo')
#     fast = data.get('srok')
#     media_group_id = data.get('media_group_id')
#     media = [types.InputMediaPhoto(media=pid) for pid in photos]

#     photo_group.setdefault(media_group_id, []).extend(photos)
        
    
    
#     if pre_checkout_query.invoice_payload == f'{cards}cards':
#         # await bot.send_message(chat_id=int(id), text="> –û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
        
#         await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True, error_message=None)
        
#         await bot.send_message(chat_id=pre_checkout_query.from_user.id, text="üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ‚Äî –º—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º üíº‚ú®")
         
        
#         if fast  == True:
#             await bot.send_message(chat_id=-1002613331754, text="–°–†–û–ß–ù–´–ô –ó–ê–ö–ê–ó")
#             await bot.send_media_group(chat_id=-1002613331754, media=media)
            
#             await bot.send_message(chat_id=-1002613331754,text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ {cards}\n"
                                                                          
#                                                                           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {data.get('slaid')}\n"
#                                                                           f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}\n"
#                                                                           f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('discription')}\n"
#                                                                           f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data.get('contact')}\n"
#                                                                           f"–°—Ç–∏–ª—å: {data.get('style')}\n"
#                                                                           f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{pre_checkout_query.from_user.id}</code>"
#                                                                           f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /mail",
#                                                                           parse_mode='HTML'
#                                                                           )
#         if fast == False:
            
#             ids = await bot.send_media_group(chat_id=-1002613331754, media=media)
#             for id in ids:
#                 ids_photo.append(id.message_id)
#             photo_id.setdefault(media_group_id, []).extend(ids_photo)

#             await bot.send_message(chat_id=-1002613331754,text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ {cards}\n"
#                                                                           f'–ù–µ —Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑\n'
#                                                                           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {data.get('slaid')}\n"
#                                                                           f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}\n"
#                                                                           f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('discription')}\n"
#                                                                           f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data.get('contact')}\n"
#                                                                           f"–°—Ç–∏–ª—å: {data.get('style')}\n"
#                                                                           f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{pre_checkout_query.from_user.id}</code>\n"
#                                                                           f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /mail",
#                                                                           reply_markup=await beru_kb(media_group_id=media_group_id),
#                                                                           parse_mode="HTML"
#                                                                           )


        
    

async def delete_message_safe(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")



        
    
    

@user_router.callback_query(F.data.startswith("take:"))
async def handle_take(callback_query: types.CallbackQuery, bot: Bot):
    print(callback_query.data)
   
    
    data = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id
    print(photo_id)
    
    media_group_id = data
    group_data = photo_group.get(media_group_id)
    
    
    media = [types.InputMediaPhoto(media=pid) for pid in group_data]
    ids = photo_id.get(media_group_id, [])

    
    try:
        await bot.send_media_group(chat_id=user_id, media=media)
        await callback_query.message.copy_to(user_id)
        tasks = [
            delete_message_safe(bot, GROUP_ID, msg_id)
            for msg_id in ids
        ]
        tasks.append(delete_message_safe(bot, GROUP_ID, callback_query.message.message_id))
        await asyncio.gather(*tasks)
        
        

    except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
    

    await callback_query.answer("‚úÖ –ó–∞–±—Ä–∞–ª!")
    
    
    photo_group.pop(media_group_id, None)
    photo_id.pop(media_group_id, None)

    



    